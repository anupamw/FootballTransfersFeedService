name: Deploy to k3s

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DROPLET_IP: ${{ secrets.DIGITALOCEAN_HOST }}
  DROPLET_USER: ${{ secrets.DIGITALOCEAN_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests  # For testing
    
    - name: Run application tests
      run: |
        echo "Running application tests..."
        python test_app.py http://localhost:8000 || echo "Tests will be run after deployment"
    
    - name: Test Docker build
      run: |
        echo "Testing Docker build..."
        docker build --platform linux/amd64 -t football-transfers-app:test .
        echo "‚úÖ Docker build test passed"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug environment variables
      run: |
        echo "üîç Debugging environment variables..."
        echo "DROPLET_IP length: ${#DROPLET_IP}"
        echo "DROPLET_IP (first 10 chars): ${DROPLET_IP:0:10}..."
        echo "SSH_PRIVATE_KEY length: ${#SSH_PRIVATE_KEY}"
        echo "SSH_PRIVATE_KEY (first 50 chars): ${SSH_PRIVATE_KEY:0:50}..."
        echo "DROPLET_USER: $DROPLET_USER"
        
        if [ -z "$DROPLET_IP" ]; then
          echo "‚ùå DROPLET_IP is empty!"
          exit 1
        fi
        
        if [ -z "$SSH_PRIVATE_KEY" ]; then
          echo "‚ùå SSH_PRIVATE_KEY is empty!"
          exit 1
        fi
        
        echo "‚úÖ Environment variables are set"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for x86_64
      run: |
        docker build --platform linux/amd64 -t football-transfers-app:latest .
    
    - name: Save Docker image
      run: |
        docker save football-transfers-app:latest -o football-transfers-app.tar
        ls -la football-transfers-app.tar
    
    - name: Setup SSH
      run: |
        echo "üîß Setting up SSH..."
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "SSH key file created, size: $(wc -c < ~/.ssh/id_rsa) bytes"
        echo "SSH key file permissions: $(ls -la ~/.ssh/id_rsa)"
        echo "SSH key file line count: $(wc -l < ~/.ssh/id_rsa)"
        echo "SSH key first line: $(head -1 ~/.ssh/id_rsa)"
        echo "SSH key last line: $(tail -1 ~/.ssh/id_rsa)"
        echo "SSH key content (first 200 chars): $(head -c 200 ~/.ssh/id_rsa)"
        echo "SSH key content (last 200 chars): $(tail -c 200 ~/.ssh/id_rsa)"
        
        # Check if the key starts with the expected format
        if grep -q "BEGIN.*PRIVATE KEY" ~/.ssh/id_rsa; then
          echo "‚úÖ SSH key has correct BEGIN marker"
        else
          echo "‚ùå SSH key missing BEGIN marker"
          echo "First few lines:"
          head -5 ~/.ssh/id_rsa
        fi
        
        if grep -q "END.*PRIVATE KEY" ~/.ssh/id_rsa; then
          echo "‚úÖ SSH key has correct END marker"
        else
          echo "‚ùå SSH key missing END marker"
          echo "Last few lines:"
          tail -5 ~/.ssh/id_rsa
        fi
        
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
        echo "SSH setup complete"
        
        echo "üîç Testing SSH connection..."
        ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "echo 'SSH test successful'" || echo "SSH test failed"
    
    - name: Copy image to droplet
      run: |
        echo "üì§ Copying image to droplet..."
        echo "Using: scp football-transfers-app.tar $DROPLET_USER@$DROPLET_IP:~/"
        echo "DROPLET_USER: $DROPLET_USER"
        echo "DROPLET_IP: $DROPLET_IP"
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no football-transfers-app.tar $DROPLET_USER@$DROPLET_IP:~/
        echo "‚úÖ Image copied successfully"
    
    - name: Copy Kubernetes manifests
      run: |
        echo "üì§ Copying Kubernetes manifests..."
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r k8s/ $DROPLET_USER@$DROPLET_IP:~/
        echo "‚úÖ Manifests copied successfully"
    
    - name: Deploy to k3s
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP << 'EOF'
          set -e
          
          echo "üßπ Cleaning up old image..."
          k3s ctr images rm docker.io/library/football-transfers-app:latest || true
          
          echo "üì¶ Loading new image into k3s..."
          k3s ctr images import ~/football-transfers-app.tar
          
          echo "üîç Verifying image is loaded..."
          k3s ctr images ls | grep football-transfers-app
          
          echo "üìã Applying Kubernetes manifests..."
          kubectl apply -f ~/k8s/namespace.yaml
          kubectl apply -f ~/k8s/deployment.yaml
          kubectl apply -f ~/k8s/service.yaml
          
          echo "üîÑ Rolling out deployment..."
          kubectl rollout restart deployment/football-transfers-app -n football-transfers
          
          echo "‚è≥ Waiting for deployment to be ready..."
          kubectl rollout status deployment/football-transfers-app -n football-transfers --timeout=300s
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üìä Current pod status:"
          kubectl get pods -n football-transfers
          
          echo "üåê Service status:"
          kubectl get svc -n football-transfers
        EOF
    
    - name: Health check
      run: |
        echo "Waiting for app to be ready..."
        sleep 30
        
        # Test the health endpoint
        for i in {1..10}; do
          if curl -f http://$DROPLET_IP:30080/health; then
            echo "‚úÖ Health check passed!"
            break
          else
            echo "‚è≥ Health check failed, retrying in 10 seconds... (attempt $i/10)"
            sleep 10
          fi
        done
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        python test_app.py http://$DROPLET_IP:30080
    
    - name: Cleanup
      if: always()
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP << 'EOF'
          echo "üßπ Cleaning up temporary files..."
          rm -f ~/football-transfers-app.tar
          rm -rf ~/k8s/
        EOF 